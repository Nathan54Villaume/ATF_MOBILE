package com.riva.atsmobile.navigation // D√©clare le package o√π se trouve ce fichier, typiquement 'navigation'.

import androidx.compose.runtime.Composable // Importe l'annotation @Composable, essentielle pour les fonctions UI de Compose.
import androidx.compose.runtime.LaunchedEffect // Importe LaunchedEffect pour ex√©cuter des effets de bord dans les Composables.
import androidx.compose.runtime.collectAsState // Importe collectAsState pour collecter des √âtats de Flow/StateFlow.
import androidx.compose.runtime.getValue // Importe getValue pour la d√©l√©gation de propri√©t√©s dans les collectAsState.
import androidx.compose.ui.Modifier // Importe Modifier pour modifier l'apparence ou le comportement des Composables.
import androidx.lifecycle.viewmodel.compose.viewModel // Importe viewModel() pour obtenir une instance de ViewModel dans un Composable.
import androidx.navigation.NavHostController // Importe NavHostController, l'objet qui g√®re la navigation.
import androidx.navigation.compose.NavHost // Importe NavHost, le composable qui h√©berge les destinations de navigation.
import androidx.navigation.compose.composable // Importe composable, la fonction pour d√©finir une destination de navigation.
import com.riva.atsmobile.ui.screens.* // Importe toutes les fonctions composables qui repr√©sentent les √©crans de votre application.
import com.riva.atsmobile.viewmodel.SelectionViewModel // Importe SelectionViewModel, un ViewModel utilis√© pour la s√©lection et l'√©tat global.
import com.riva.atsmobile.viewmodel.EtapeViewModel // Importe EtapeViewModel, un ViewModel sp√©cifique aux √©tapes.

/**
 * Composant NavHost principal de l'application ATS Mobile.
 *
 * Ce Composable d√©finit toutes les destinations de navigation de l'application
 * et g√®re le routage entre elles. Il int√®gre √©galement la logique de protection
 * des routes bas√©e sur le r√¥le de l'utilisateur et le mode d√©veloppeur.
 *
 * @param navController Le contr√¥leur de navigation qui g√®re le graphique de navigation.
 * @param selectionViewModel Le ViewModel qui g√®re les s√©lections et l'√©tat global de l'utilisateur (r√¥le, mode dev).
 * @param modifier Un Modifier pour appliquer des modifications au NavHost.
 */
@Composable
fun ATSMobileNavHost(
    navController: NavHostController,
    selectionViewModel: SelectionViewModel,
    modifier: Modifier = Modifier
) {
    // Collecte le r√¥le de l'utilisateur depuis le SelectionViewModel comme un √©tat Compose.
    val role by selectionViewModel.role.collectAsState()
    // Collecte l'√©tat du mode d√©veloppeur depuis le SelectionViewModel comme un √©tat Compose.
    val devMode by selectionViewModel.devModeEnabled.collectAsState()

    // D√©finit le NavHost qui g√©rera la navigation.
    NavHost(
        navController    = navController, // Le contr√¥leur de navigation.
        startDestination = Routes.Login, // La route de d√©part par d√©faut lorsque l'application est lanc√©e.
        modifier         = modifier // Le modificateur appliqu√© au NavHost.
    ) {
        // D√©finition de la destination pour la route de connexion.
        composable(Routes.Login) {
            LoginScreen(navController, selectionViewModel)
        }

        // D√©finition de la destination pour la route de l'accueil.
        // Prot√©g√©e par la fonction requireRoleOrDev.
        composable(Routes.Home) {
            requireRoleOrDev(role, devMode, navController) {
                HomeScreen(selectionViewModel, navController)
            }
        }

        // D√©finition de la destination pour le changement de gamme.
        // Prot√©g√©e par la fonction requireRoleOrDev.
        composable(Routes.ChangementGamme) {
            requireRoleOrDev(role, devMode, navController) {
                ChangementGammeScreen(selectionViewModel, navController)
            }
        }

        // D√©finition de la destination pour le changement de mot de passe.
        // Prot√©g√©e par la fonction requireRoleOrDev.
        composable(Routes.ChangePassword) {
            requireRoleOrDev(role, devMode, navController) {
                ChangePasswordScreen(selectionViewModel, navController)
            }
        }

        // D√©finition de la destination pour les param√®tres.
        // Prot√©g√©e par la fonction requireRoleOrDev.
        composable(Routes.Settings) {
            requireRoleOrDev(role, devMode, navController) {
                // Injection du EtapeViewModel pour cet √©cran.
                val etapeViewModel: EtapeViewModel = viewModel()
                ParametresScreen(
                    navController      = navController,
                    selectionViewModel = selectionViewModel,
                    etapeViewModel     = etapeViewModel
                )
            }
        }

        // D√©finition de la destination pour les outils de d√©veloppement.
        // Prot√©g√©e par la fonction requireRoleOrDev.
        composable(Routes.DevTools) {
            requireRoleOrDev(role, devMode, navController) {
                DevSettingsScreen(navController, selectionViewModel)
            }
        }

        // D√©finition de la destination pour la s√©lection du type d'op√©ration.
        // Prot√©g√©e par la fonction requireRoleOrDev.
        composable(Routes.TypeOperation) {
            requireRoleOrDev(role, devMode, navController) {
                TypeOperationScreen(selectionViewModel, navController)
            }
        }

        // D√©finition de la destination pour les param√®tres du type d'op√©ration.
        // Prot√©g√©e par la fonction requireRoleOrDev.
        composable(Routes.TypeOperationParametres) {
            requireRoleOrDev(role, devMode, navController) {
                TypeOperationParamScreen(selectionViewModel, navController)
            }
        }

        // D√©finition de la destination pour le tableau de bord ATS.
        // Prot√©g√©e par la fonction requireRoleOrDev.
        composable(Routes.DashboardATS) {
            requireRoleOrDev(role, devMode, navController) {
                DashboardATSScreen(navController, selectionViewModel)
            }
        }

        // D√©finition de la destination pour le tableau de bord ATR.
        // Prot√©g√©e par la fonction requireRoleOrDev.
        composable(Routes.DashboardATR) {
            requireRoleOrDev(role, devMode, navController) {
                DashboardATRScreen(navController, selectionViewModel)
            }
        }

        // üÜï Nouvelle destination pour l'assistant d'√©tapes (StepWizard), √©galement prot√©g√©e.
        composable(Routes.StepWizard) {
            requireRoleOrDev(role, devMode, navController) {
                val etapeViewModel: EtapeViewModel = viewModel()
                EtapesScreen(
                    navController      = navController,
                    etapeViewModel     = etapeViewModel,
                    selectionViewModel = selectionViewModel
                )
            }
        }


    }
}

/**
 * Fonction Composable utilitaire pour appliquer des restrictions de r√¥le ou de mode d√©veloppeur
 * √† une destination de navigation.
 *
 * Si l'utilisateur n'a pas le r√¥le requis et que le mode d√©veloppeur n'est pas activ√©,
 * il est redirig√© vers l'√©cran de connexion.
 *
 * @param role Le r√¥le actuel de l'utilisateur (String).
 * @param devMode L'√©tat du mode d√©veloppeur (Boolean).
 * @param navController Le contr√¥leur de navigation pour effectuer la redirection.
 * @param content Le Composable √† afficher si l'acc√®s est autoris√©.
 */
@Composable
private fun requireRoleOrDev(
    role: String,
    devMode: Boolean,
    navController: NavHostController,
    content: @Composable () -> Unit
) {
    // V√©rifie si le r√¥le n'est pas vide (utilisateur connect√© avec un r√¥le) OU si le mode d√©veloppeur est activ√©.
    if (role.isNotBlank() || devMode) {
        // Si autoris√©, ex√©cute le contenu Composable de la destination.
        content()
    } else {
        // Si non autoris√©, d√©clenche une navigation vers l'√©cran de connexion.
        // LaunchedEffect assure que cette navigation n'est d√©clench√©e qu'une seule fois
        // et qu'elle n'est pas r√©p√©t√©e √† chaque recomposition.
        LaunchedEffect(Unit) {
            navController.navigate(Routes.Login) {
                // popUpTo(0) efface toute la pile de retour, emp√™chant l'utilisateur de revenir aux √©crans restreints via le bouton retour.
                popUpTo(0)
            }
        }
    }
}